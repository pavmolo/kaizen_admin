import streamlit as st
import pandas as pd
import psycopg2

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_CONFIG = {
    'dbname': 'kaizen_it_administration_aport',
    'user': 'pavmolo',
    'password': st.secrets["database"]["password"],
    'host': '45.86.182.111'
}

def get_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(**DATABASE_CONFIG)

def get_tables():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT tablename FROM pg_tables WHERE schemaname='public';")
            return [row[0] for row in cursor.fetchall()]

def get_table_data(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    with get_connection() as conn:
        return pd.read_sql(f"SELECT * FROM {table_name};", conn)

def create_table(table_name, fields, primary_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            fields_str = ", ".join([f"{name} {type}" for name, type in fields])
            sql = f"CREATE TABLE {table_name} ({fields_str}, PRIMARY KEY ({primary_key}));"
            cursor.execute(sql)
            conn.commit()

def get_primary_key(table_name):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"""
                SELECT a.attname
                FROM   pg_index i
                JOIN   pg_attribute a ON a.attrelid = i.indrelid
                                     AND a.attnum = ANY(i.indkey)
                WHERE  i.indrelid = '{table_name}'::regclass
                AND    i.indisprimary;
            """)
            result = cursor.fetchone()
            return result[0] if result else None

data_types = {
    "–¶–µ–ª–æ–µ —á–∏—Å–ª–æ üî¢": "INTEGER",
    "–¢–µ–∫—Å—Ç üÖ∞Ô∏è": "VARCHAR",
    "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç üìù": "TEXT",
    "–î–∞—Ç–∞ üìÖ": "DATE",
    "–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ üìä": "FLOAT"
}

def change_column_type(table_name, column_name, new_type):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"ALTER TABLE {table_name} ALTER COLUMN {column_name} TYPE {new_type};")
            conn.commit()

def rename_column(table_name, old_name, new_name):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"ALTER TABLE {table_name} RENAME COLUMN {old_name} TO {new_name};")
            conn.commit()

def get_table_columns(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT column_name FROM information_schema.columns WHERE table_name = '{table_name}';")
            return [row[0] for row in cursor.fetchall()]

def insert_into_table(table_name, data_dict):
    """–í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É."""
    columns = ", ".join(data_dict.keys())
    values = ", ".join(["%s"] * len(data_dict))
    sql = f"INSERT INTO {table_name} ({columns}) VALUES ({values});"
    
    with get_connection() as conn:
        with conn.cursor() as cursor:
            try:
                cursor.execute(sql, list(data_dict.values()))
                conn.commit()
                return True
            except psycopg2.errors.UniqueViolation:
                conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                st.error(f"–û—à–∏–±–∫–∞: –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∫–ª—é—á–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}.")
                return False

def get_row_data(table_name, key_column, key_value):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT * FROM {table_name} WHERE {key_column} = %s;", (key_value,))
            row = cursor.fetchone()
            columns = [desc[0] for desc in cursor.description]
            return dict(zip(columns, row))

def get_unique_values(table_name, column_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç–æ–ª–±—Ü–∞."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT DISTINCT {column_name} FROM {table_name};")
            return [row[0] for row in cursor.fetchall()]

def update_table_data(table_name, key_column, key_value, data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    set_clause = ", ".join([f"{column} = %s" for column in data.keys()])
    sql = f"UPDATE {table_name} SET {set_clause} WHERE {key_column} = %s;"
    
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(sql, list(data.values()) + [key_value])
            conn.commit()

# ... [–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞]

# –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main_interface():
    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    page = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—è", "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É", "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É", "–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"])
    if page == "–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        create_table_interface()
    elif page == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ":
        add_column_interface()
    elif page == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—è":
        modify_table_interface()
    elif page == "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É":
        add_row_interface()
    elif page == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã":
        view_table_interface()
    elif page == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É":
        update_row_interface()
    elif page == "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É":
        delete_row_interface()
    elif page == "–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        delete_table_interface()

if __name__ == "__main__":
    main_interface()
