# streamlit_app.py
import streamlit as st
import pandas as pd
import psycopg2

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_CONFIG = {
    'dbname': 'kaizen_it_administration_aport',
    'user': 'pavmolo',
    'password': st.secrets["database"]["password"],
    'host': '45.86.182.111'
}

def get_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(**DATABASE_CONFIG)

def create_table(table_name, fields, primary_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            fields_str = ", ".join([f"{name} {type}" for name, type in fields])
            sql = f"CREATE TABLE {table_name} ({fields_str}, PRIMARY KEY ({primary_key}));"
            cursor.execute(sql)
            conn.commit()

st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
def create_table_page():
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")
    
    table_name = st.text_input("–ò–º—è —Ç–∞–±–ª–∏—Ü—ã")
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ SQL —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    data_types = {
        "–¶–µ–ª–æ–µ —á–∏—Å–ª–æ üî¢": "INTEGER",
        "–¢–µ–∫—Å—Ç üÖ∞Ô∏è": "VARCHAR",
        "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç üìù": "TEXT",
        "–î–∞—Ç–∞ üìÖ": "DATE",
        "–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ üìä": "FLOAT"
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'fields' not in st.session_state:
        st.session_state.fields = []
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    with st.form(key='add_column_form'):
        field_name = st.text_input(f"–ò–º—è –ø–æ–ª—è", key=f"field_name_{len(st.session_state.fields)}")
        field_type = st.selectbox(f"–¢–∏–ø –ø–æ–ª—è", list(data_types.keys()), key=f"field_type_{len(st.session_state.fields)}")
        submit_button = st.form_submit_button(label='–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü')
    
    if submit_button:
        if field_name and field_type:
            st.session_state.fields.append((field_name, data_types[field_type]))
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    for field in st.session_state.fields:
        st.write(f"{field[0]} ({field[1]})")
    
    # –í—ã–±–æ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è
    primary_key = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ", [field[0] for field in st.session_state.fields])
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –≤–∏–¥–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
    df = pd.DataFrame(columns=[field[0] for field in st.session_state.fields])
    st.dataframe(df)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if st.button("–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"):
        create_table(table_name, st.session_state.fields, primary_key)
        st.success(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    def view_tables_page():
        st.title("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü")
        tables = get_tables()
        selected_table = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É:", tables)
        if selected_table:
            data = get_table_data(selected_table)
            st.dataframe(data)

# –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
page = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", ["–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü"])

if page == "–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É":
    create_table_page()
elif page == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü":
    view_tables_page()
