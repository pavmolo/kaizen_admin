# streamlit_app.py
import streamlit as st
import pandas as pd
import psycopg2

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_CONFIG = {
    'dbname': 'kaizen_it_administration_aport',
    'user': 'pavmolo',
    'password': st.secrets["database"]["password"],
    'host': '45.86.182.111'
}

def get_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(**DATABASE_CONFIG)
def get_tables():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT tablename FROM pg_tables WHERE schemaname='public';")
            return [row[0] for row in cursor.fetchall()]
def get_table_data(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    with get_connection() as conn:
        return pd.read_sql(f"SELECT * FROM {table_name};", conn)
def create_table(table_name, fields, primary_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            fields_str = ", ".join([f"{name} {type}" for name, type in fields])
            sql = f"CREATE TABLE {table_name} ({fields_str}, PRIMARY KEY ({primary_key}));"
            cursor.execute(sql)
            conn.commit()
def view_tables_page():
    st.title("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
    tables = get_tables()

    for table_name in tables:
        st.subheader(f"–¢–∞–±–ª–∏—Ü–∞: {table_name}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        data = get_table_data(table_name)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        key_column = get_primary_key(table_name)

        # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤—å—Ç–µ –∏–∫–æ–Ω–∫—É –∫–ª—é—á–∞ –∫ –Ω–µ–º—É
        if key_column and key_column in data.columns:
            data = data.rename(columns={key_column: f"üîë {key_column}"})

        # –í—ã–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame –≤ Streamlit
        st.dataframe(data)
        st.write("---")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏


st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

def get_primary_key(table_name):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"""
                SELECT a.attname
                FROM   pg_index i
                JOIN   pg_attribute a ON a.attrelid = i.indrelid
                                     AND a.attnum = ANY(i.indkey)
                WHERE  i.indrelid = '{table_name}'::regclass
                AND    i.indisprimary;
            """)
            result = cursor.fetchone()
            return result[0] if result else None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ SQL —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
data_types = {
    "–¶–µ–ª–æ–µ —á–∏—Å–ª–æ üî¢": "INTEGER",
    "–¢–µ–∫—Å—Ç üÖ∞Ô∏è": "VARCHAR",
    "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç üìù": "TEXT",
    "–î–∞—Ç–∞ üìÖ": "DATE",
    "–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ üìä": "FLOAT"
}


def create_table_page():
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")
    
    table_name = st.text_input("–ò–º—è —Ç–∞–±–ª–∏—Ü—ã")
   # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
def create_table_interface():
    st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")
    
    table_name = st.text_input("–ò–º—è —Ç–∞–±–ª–∏—Ü—ã")
    
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π
    if 'fields' not in st.session_state:
        st.session_state.fields = []
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    with st.form(key='add_column_form'):
        field_name = st.text_input(f"–ò–º—è –ø–æ–ª—è", key=f"field_name_{len(st.session_state.fields)}")
        field_type = st.selectbox(f"–¢–∏–ø –ø–æ–ª—è", list(data_types.keys()), key=f"field_type_{len(st.session_state.fields)}")
        add_column_button = st.form_submit_button(label='–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü')
    
    if add_column_button:
        if field_name and field_type:
            st.session_state.fields.append((field_name, data_types[field_type]))
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    for field in st.session_state.fields:
        st.write(f"{field[0]} ({field[1]})")
    
    # –í—ã–±–æ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è
    primary_key = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ", [field[0] for field in st.session_state.fields])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if st.button("–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"):
        if table_name and st.session_state.fields:
            create_table(table_name, st.session_state.fields, primary_key)
            st.success(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            st.session_state.fields = []  # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ.")


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
def add_column_interface():
    st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    column_name = st.text_input("–ò–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è")
    column_type = st.selectbox("–¢–∏–ø –ø–æ–ª—è", ["INTEGER", "VARCHAR", "TEXT", "DATE", "FLOAT"])
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ"):
        add_column_to_table(table_name, column_name, column_type)
        st.success(f"–ü–æ–ª–µ {column_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}!")

def get_table_columns(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT column_name FROM information_schema.columns WHERE table_name = '{table_name}';")
            return [row[0] for row in cursor.fetchall()]


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
def add_row_interface():
    st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
    
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    columns = get_table_columns(table_name)
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data_dict = {}
    
    for col in columns:
        data_dict[col] = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {col}")
    
    if st.button("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É"):
        if all(value for value in data_dict.values()):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            insert_into_table(table_name, data_dict)
            st.success(f"–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}!")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
def insert_into_table(table_name, data_dict):
    """–í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É."""
    columns = ", ".join(data_dict.keys())
    values = ", ".join(["%s"] * len(data_dict))
    sql = f"INSERT INTO {table_name} ({columns}) VALUES ({values});"
    
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(sql, list(data_dict.values()))
            conn.commit()


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã
def view_table_interface():
    st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    data = get_table_data(table_name)
    st.dataframe(data)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
def update_row_interface():
    st.subheader("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    key_column = get_primary_key(table_name)
    key_value = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è ({key_column}) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    if st.button(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {key_column} = {key_value}"):
        data = get_row_data(table_name, key_column, key_value)
        for column, value in data.items():
            data[column] = st.text_input(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {column}", value)
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"):
            update_table_data(table_name, key_column, key_value, data)
            st.success(f"–ó–∞–ø–∏—Å—å —Å {key_column} = {key_value} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def delete_row_interface():
    st.subheader("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    key_column = get_primary_key(table_name)
    key_value = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è ({key_column}) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    if st.button("–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É"):
        delete_from_table(table_name, key_column, key_value)
        st.success(f"–°—Ç—Ä–æ–∫–∞ —Å {key_column} = {key_value} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
def delete_table_interface():
    st.subheader("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", get_tables())
    if st.button(f"–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {table_name}?"):
        drop_table(table_name)
        st.success(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

# –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main_interface():
    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    page = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ", "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É", "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É", "–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"])
    if page == "–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        create_table_interface()
    elif page == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ":
        add_column_interface()
    elif page == "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É":
        add_row_interface()
    elif page == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã":
        view_table_interface()
    elif page == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É":
        update_row_interface()
    elif page == "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É":
        delete_row_interface()
    elif page == "–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        delete_table_interface()

if __name__ == "__main__":
    main_interface()
