import streamlit as st
import pandas as pd
import psycopg2

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_CONFIG = {
    'dbname': 'kaizen_it_administration_aport',
    'user': 'pavmolo',
    'password': st.secrets["database"]["password"],
    'host': '45.86.182.111'
}

def get_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(**DATABASE_CONFIG)

def get_tables():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT tablename FROM pg_tables WHERE schemaname='public';")
            return [row[0] for row in cursor.fetchall()]

def get_table_data(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    with get_connection() as conn:
        return pd.read_sql(f"SELECT * FROM {table_name};", conn)

def create_table(table_name, fields, primary_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            fields_str = ", ".join([f"{name} {type}" for name, type in fields])
            sql = f"CREATE TABLE {table_name} ({fields_str}, PRIMARY KEY ({primary_key}));"
            cursor.execute(sql)
            conn.commit()

def get_primary_key(table_name):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"""
                SELECT a.attname
                FROM   pg_index i
                JOIN   pg_attribute a ON a.attrelid = i.indrelid
                                     AND a.attnum = ANY(i.indkey)
                WHERE  i.indrelid = '{table_name}'::regclass
                AND    i.indisprimary;
            """)
            result = cursor.fetchone()
            return result[0] if result else None

def get_referenced_table(table_name, column_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å—Å—ã–ª–∞–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"""
                SELECT cl.relname AS referenced_table
                FROM pg_constraint AS con
                JOIN pg_class AS cl ON con.confrelid = cl.oid
                JOIN pg_attribute AS att ON att.attnum = ANY(con.conkey)
                WHERE con.conrelid = '{table_name}'::regclass AND att.attname = '{column_name}';
            """)
            result = cursor.fetchone()
            referenced_table = result[0] if result else None
            return referenced_table


def add_foreign_key(table_name, column_name, reference_table, reference_column):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –∫ —Å—Ç–æ–ª–±—Ü—É."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            sql = f"ALTER TABLE {table_name} ADD FOREIGN KEY ({column_name}) REFERENCES {reference_table}({reference_column});"
            cursor.execute(sql)
            conn.commit()
def get_foreign_keys(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"""
                SELECT kcu.column_name 
                FROM information_schema.table_constraints AS tc 
                JOIN information_schema.key_column_usage AS kcu
                ON tc.constraint_name = kcu.constraint_name
                WHERE tc.constraint_type = 'FOREIGN KEY' AND tc.table_name='{table_name}';
            """)
            return [row[0] for row in cursor.fetchall()]

def get_unique_values(table_name, column_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Ç–∞–±–ª–∏—Ü—ã."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT DISTINCT {column_name} FROM {table_name};")
            return [row[0] for row in cursor.fetchall()]
            
data_types = {
    "–¶–µ–ª–æ–µ —á–∏—Å–ª–æ üî¢": "INTEGER",
    "–¢–µ–∫—Å—Ç üÖ∞Ô∏è": "VARCHAR",
    "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç üìù": "TEXT",
    "–î–∞—Ç–∞ üìÖ": "DATE",
    "–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ üìä": "FLOAT"
}
DATA_TYPE_TO_ICON = {
    "INTEGER": "üî¢",
    "VARCHAR": "üÖ∞Ô∏è",
    "TEXT": "üìù",
    "DATE": "üìÖ",
    "FLOAT": "üìä"
}
# –°–ª–æ–≤–∞—Ä—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤–≤–æ–¥–∞ Streamlit
DATA_TYPE_TO_INPUT = {
    "TEXT": st.text_input,
    "VARCHAR": st.text_input,
    "DATE": st.date_input,
    "FLOAT": st.number_input,
    "INTEGER": st.number_input
}

def change_column_type(table_name, column_name, new_type):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"ALTER TABLE {table_name} ALTER COLUMN {column_name} TYPE {new_type};")
            conn.commit()

def rename_column(table_name, old_name, new_name):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"ALTER TABLE {table_name} RENAME COLUMN {old_name} TO {new_name};")
            conn.commit()

def get_table_columns(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT column_name FROM information_schema.columns WHERE table_name = '{table_name}';")
            return [row[0] for row in cursor.fetchall()]

def insert_into_table(table_name, data_dict):
    """–í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É."""
    columns = ", ".join(data_dict.keys())
    values = ", ".join(["%s"] * len(data_dict))
    sql = f"INSERT INTO {table_name} ({columns}) VALUES ({values});"
    
    with get_connection() as conn:
        with conn.cursor() as cursor:
            try:
                cursor.execute(sql, list(data_dict.values()))
                conn.commit()
                return True
            except psycopg2.errors.UniqueViolation:
                conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                st.error(f"–û—à–∏–±–∫–∞: –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∫–ª—é—á–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}.")
                return False

def get_row_data(table_name, key_column, key_value):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT * FROM {table_name} WHERE {key_column} = %s;", (key_value,))
            row = cursor.fetchone()
            columns = [desc[0] for desc in cursor.description]
            return dict(zip(columns, row))

def get_column_data_type(table_name, column_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"SELECT data_type FROM information_schema.columns WHERE table_name = '{table_name}' AND column_name = '{column_name}';")
            result = cursor.fetchone()
            return result[0].upper() if result else None


def update_table_data(table_name, key_column, key_value, data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    set_clause = ", ".join([f"{column} = %s" for column in data.keys()])
    sql = f"UPDATE {table_name} SET {set_clause} WHERE {key_column} = %s;"
    
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(sql, list(data.values()) + [key_value])
            conn.commit()
def view_tables_page():
    st.title("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
    tables = get_tables()

    for table_name in tables:
        st.subheader(f"–¢–∞–±–ª–∏—Ü–∞: {table_name}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        data = get_table_data(table_name)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        key_column = get_primary_key(table_name)
        foreign_keys = get_foreign_keys(table_name)

        # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤—å—Ç–µ –∏–∫–æ–Ω–∫—É –∫–ª—é—á–∞ –∫ –Ω–µ–º—É
        if key_column and key_column in data.columns:
            data = data.rename(columns={key_column: f"üîë {key_column}"})

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å–∫—Ä–µ–ø–∫–∏ –∫ —Å—Ç–æ–ª–±—Ü–∞–º —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
        for fk in foreign_keys:
            if fk in data.columns:
                data = data.rename(columns={fk: f"üìé {fk}"})

        # –í—ã–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame –≤ Streamlit
        st.dataframe(data)
        st.write("---")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏

# –ò–Ω—Ç–µ—Ä—Ñ–µ—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def create_table_interface():
    st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")
    table_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
    
    if 'fields' not in st.session_state:
        st.session_state.fields = []
    
    with st.form(key='add_column_form'):
        field_name = st.text_input(f"–ò–º—è –ø–æ–ª—è", key=f"field_name_{len(st.session_state.fields)}")
        field_type = st.selectbox(f"–¢–∏–ø –ø–æ–ª—è", list(data_types.keys()), key=f"field_type_{len(st.session_state.fields)}")
        add_column_button = st.form_submit_button(label='–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü')
    
    if add_column_button:
        if field_name and field_type:
            st.session_state.fields.append((field_name, data_types[field_type]))
    
    for field in st.session_state.fields:
        st.write(f"{field[0]} ({field[1]})")
    
    primary_key = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ", [field[0] for field in st.session_state.fields])
    
    if st.button("–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"):
        if table_name and st.session_state.fields:
            create_table(table_name, st.session_state.fields, primary_key)
            st.success(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            st.session_state.fields = []

def add_column_interface():
    st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    column_name = st.text_input("–ò–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è")
    column_type = st.selectbox("–¢–∏–ø –ø–æ–ª—è", list(data_types.keys()))
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ"):
        add_column_to_table(table_name, column_name, data_types[column_type])
        st.success(f"–ü–æ–ª–µ {column_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}!")

def modify_table_interface():
    st.subheader("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    action = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö", "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü", "–î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á"])
    
    if action == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö":
        column_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", get_table_columns(table_name))
        new_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö", list(data_types.keys()))
        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
            change_column_type(table_name, column_name, data_types[new_type])
            st.success(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {column_name} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_type}!")
    
    elif action == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü":
        old_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", get_table_columns(table_name))
        new_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞")
        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
            rename_column(table_name, old_name, new_name)
            st.success(f"–°—Ç–æ–ª–±–µ—Ü {old_name} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {new_name}!")

    elif action == "–î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á":
            column_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞", get_table_columns(table_name))
            reference_table = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É-–∏—Å—Ç–æ—á–Ω–∏–∫", get_tables())
            reference_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ", get_table_columns(reference_table))
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á"):
                add_foreign_key(table_name, column_name, reference_table, reference_column)
                st.success(f"–í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–ª—è {column_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


def add_row_interface():
    st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    columns = get_table_columns(table_name)
    
    with st.form(key='add_row_form'):
        data_dict = {}
        for col in columns:
            col_data_type = get_column_data_type(table_name, col)
            icon = DATA_TYPE_TO_ICON.get(col_data_type, "")
            referenced_table = get_referenced_table(table_name, col)
            
            if referenced_table:
                ref_primary_key = get_primary_key(referenced_table)
                possible_values = get_unique_values(referenced_table, ref_primary_key)
                data_dict[col] = st.selectbox(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {col} {icon}", possible_values)
            else:
                input_function = DATA_TYPE_TO_INPUT.get(col_data_type, st.text_input)
                data_dict[col] = input_function(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {col} {icon}")
        
        submit_button = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
        if submit_button:
            if all(value for value in data_dict.values()):
                success = insert_into_table(table_name, data_dict)
                if success:
                    st.success(f"–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}!")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")


def view_table_interface():
    st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    data = get_table_data(table_name)
    st.dataframe(data)

def update_row_interface():
    st.subheader("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
    table_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É", get_tables())
    key_column = get_primary_key(table_name)
    key_value = st.selectbox(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è ({key_column}) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", get_unique_values(table_name, key_column))
    
    if key_value:
        data = get_row_data(table_name, key_column, key_value)
        with st.form(key='update_row_form'):
            for column in data.keys():
                col_data_type = get_column_data_type(table_name, column)
                icon = DATA_TYPE_TO_ICON.get(col_data_type, "")
                referenced_table = get_referenced_table(table_name, column)
                
                if referenced_table:
                    data[column] = st.selectbox(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {column} {icon}", get_unique_values(referenced_table, get_primary_key(referenced_table)), index=get_unique_values(referenced_table, get_primary_key(referenced_table)).index(data[column]))
                else:
                    input_function = DATA_TYPE_TO_INPUT.get(col_data_type, st.text_input)
                    data[column] = input_function(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {column} {icon}", data[column])
            
            submit_button = st.form_submit_button("–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
            if submit_button:
                update_table_data(table_name, key_column, key_value, data)
                st.success(f"–ó–∞–ø–∏—Å—å —Å {key_column} = {key_value} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")



# –í—ã–≤–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞


def main_interface():
    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    page = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—è", "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É", "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É", "–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"])
    if page == "–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        create_table_interface()
    elif page == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ":
        add_column_interface()
    elif page == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—è":
        modify_table_interface()
    elif page == "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É":
        add_row_interface()
    elif page == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã":
        view_tables_page()
    elif page == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É":
        update_row_interface()
    elif page == "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É":
        delete_row_interface()
    elif page == "–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        delete_table_interface()

if __name__ == "__main__":
    main_interface()
